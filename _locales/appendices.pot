# SOME DESCRIPTIVE TITLE.
# Copyright (C) The Plone Foundation
# This file is distributed under the same license as the Plone Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Plone Documentation ['4.3']\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-05-29 14:19+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../appendices/error-reference.rst:2
# 0eaa3c6e8e454c04973e682a7a0148cc
msgid "Error Reference"
msgstr ""

#: ../appendices/glossary.rst:3
# 6757a5f6ed3b4e1bbe3bb20ec6948adb
msgid "Glossary"
msgstr ""

#: ../appendices/glossary.rst:5
# 280317a79f4a425a8ec814fb409c9e7f
msgid "This is a glossary for some definitions used in this documentation and still heavily under construction."
msgstr ""

#: ../appendices/glossary.rst:8
# a50541dc63a74b73bb606f968ce04195
msgid "It incorporates the original `glossary on plone.org <http://plone.org/documentation/glossary>`_."
msgstr ""

#: ../appendices/glossary.rst:494
# 26568512f62e46019ec0f40964a3ae3f
msgid ".po"
msgstr ""

#: ../appendices/glossary.rst:496
# 32783bea171a43f29f6d41e2d7f530d4
msgid "The file format used by the :term:`gettext` translation system. http://www.gnu.org/software/hello/manual/gettext/PO-Files.html"
msgstr ""

#: ../appendices/glossary.rst:194
# 4a5f94651d574060b157b35b7a4dde8e
msgid "Acquisition"
msgstr ""

#: ../appendices/glossary.rst:196
# 4b62254b312b46ffa41ef61a6c85a13a
msgid "Simply put, any Zope object can acquire any object or property from any of its parents. That is, if you have a folder called *A*, containing two resources (a document called *homepage* and another folder called *B*), then an URL pointing at `http://.../A/B/homepage` would work even though *B* is empty. This is because Zope starts to look for *homepage* in *B*, doesn't find it, and goes back up to *A*, where it's found. The reality, inevitably, is more complex than this. For the whole story, see the `Acquisition chapter in the Zope Book <http://www.plope.com/Books/2_7Edition/Acquisition.stx>`_."
msgstr ""

#: ../appendices/glossary.rst:363
# 49ec3c6d8fcf45eca93871e7f3ba5ca3
msgid "AGX"
msgstr ""

#: ../appendices/glossary.rst:365
# 9ec35f134f9845cb9a6a8a0405349c1c
msgid "AGX is short for :term:`ArchGenXML`."
msgstr ""

#: ../appendices/glossary.rst:226
# 9dcc3f2a2a0e442bb61a5d6d9f5419ba
msgid "Archetypes"
msgstr ""

#: ../appendices/glossary.rst:228
# 8bc3180fcd314563bca34f852db41eec
msgid "Archetypes is a framework designed to facilitate the building of applications for Plone and :term:`CMF`. Its main purpose is to provide a common method for building content objects, based on schema definitions. Fields can be grouped for editing, making it very simple to create wizard-like forms. Archetypes is able to do all the heavy lifting needed to bootstrap a content type, allowing the developer to focus on other things such as business rules, planning, scaling and designing. It provides features such as auto-generation of editing and presentation views. Archetypes code can be generated from :term:`UML` using :term:`ArchGenXML`."
msgstr ""

#: ../appendices/glossary.rst:356
# d45002924dfd47298092db69f5b13d36
msgid "ArchGenXML"
msgstr ""

#: ../appendices/glossary.rst:358
# 8d298a2f02b641b580a36422366aec2b
msgid "ArchGenXML is a code-generator for CMF/Plone applications (a :term:`Product`) based on the :term:`Archetypes` framework. It parses UML models in XMI-Format (``.xmi``, ``.zargo``, ``.zuml``), created with applications such as ArgoUML, Poseidon or ObjectDomain. A brief tutorial for ArchGenXML is present on the plone.org site."
msgstr ""

#: ../appendices/glossary.rst:287
# 1783b502813f4492a8552f58cd998213
msgid "ATCT"
msgstr ""

#: ../appendices/glossary.rst:289
# db7d9e8082a64f0d8cad8458fe677538
msgid "ATContentTypes - the Plone content types written with Archetypes which replaces the default CMF content types in Plone 2.1 onwards."
msgstr ""

#: ../appendices/glossary.rst:332
# 36375faf2b3c45438c1e23af09e70305
msgid "BBB"
msgstr ""

#: ../appendices/glossary.rst:334
# f321306aea0d462981d49869d29bcec1
msgid "When adding (or leaving) a piece of code for backward compatibility, we use a BBB comment marker with a date."
msgstr ""

#: ../appendices/glossary.rst:554
# 5b2b2aa553da49418e4d7472213a6550
msgid "Buildout"
msgstr ""

#: ../appendices/glossary.rst:556
# 70f77771537a43d3acdcc594dafe19a0
msgid "Buildout is a Python-based build system for creating, assembling and deploying applications from multiple parts, some of which may be non-Python-based. It lets you create a buildout configuration and reproduce the same software later. See `buildout.org <http://www.buildout.org/en/latest/>`_"
msgstr ""

#: ../appendices/glossary.rst:64
# 96c7f79005434c7e87e4bc73aa15b8f4
msgid "Catalog"
msgstr ""

#: ../appendices/glossary.rst:66
# d3b2efde929048d489b936f61995678d
msgid "The catalog is an internal index of the content inside Plone so that it can be searched. The catalog object is accessible through the :term:`ZMI` as the ``portal_catalog`` object."
msgstr ""

#: ../appendices/glossary.rst:238
# 1ee5d8cbe9334704b29d8120e8858227
msgid "CMF"
msgstr ""

#: ../appendices/glossary.rst:240
# 81d6877e88254f8d9038dad4de124ce7
msgid "The *Content Management Framework* is a framework for building content-oriented applications within Zope. It as formed the basis of Plone content from the start."
msgstr ""

#: ../appendices/glossary.rst:302
# c570e6a79b3e46f8839973a7f0259097
msgid "Collective"
msgstr ""

#: ../appendices/glossary.rst:304
# 128eab4a1ab945b9a86db7148b72c903
msgid "The *Collective* is a community code repository for Plone Products and other add-ons, and is a useful place to find the very latest code for hundreds of add-ons to Plone. Developers of new Plone Products are encouraged to share their code via the Collective so that others can easily find it, use it, and contribute fixes and improvements."
msgstr ""

#: ../appendices/glossary.rst:546
# 2ec933c476974ead9e8cd9c68b10f167
msgid "control panel"
msgstr ""

#: ../appendices/glossary.rst:548
# 88c8d92a3c92491d9eb3535c232d8610
msgid "The Control Panel is the place where many parameters of a Plone site can be set. Here add-ons can be enabled, users and groups created, the workflow and permissions can be set and settings for language, caching and many other can be found. If you have \"Site Admin\" permisisons, you can find it under \"Site -> Site Setup\" in your personal tools."
msgstr ""

#: ../appendices/glossary.rst:147
# bdad2f2cac774696ab9d36a90c70040e
msgid "CSS"
msgstr ""

#: ../appendices/glossary.rst:149
# 8f95354683ab4bce9f40d0cbb84651b4
msgid "Cascading Style Sheets is a way to separate content from presentation. Plone uses this extensively, and it is a web standard `documented at the W3C web site <http://www.w3.org/Style/CSS/>`_. If you want to learn CSS, we recommend `the W3Schools CSS Resources <http://www.w3schools.com/Css/default.asp>`_ and the `SitePoint CSS Reference <http://reference.sitepoint.com/css>`_."
msgstr ""

#: ../appendices/glossary.rst:551
# 5c49e3a19a33494ba319d785f64459bd
msgid "Dexterity"
msgstr ""

#: ../appendices/glossary.rst:553
# 4b0f6efb3cae49f5bc7fb0c58bfa343e
msgid "Dexterity is an alternative to :term:`Archetypes`, Plone's venerable content type framework. Being more recent, Dexterity has been able to learn from some of the mistakes that were made Archetypes, and - more importantly - leverage some of the technologies that did not exist when Archetypes was first conceived. Dexterity is built from the ground up to support through-the-web type creation. Dexterity also allows types to be developed jointly through-the-web and on the filesystem. For example, a schema can be written in Python and then extended through the web."
msgstr ""

#: ../appendices/glossary.rst:75
# c08910fba65341bf8c411ccd20c83d23
msgid "Document"
msgstr ""

#: ../appendices/glossary.rst:77
# 3a27029ecb99468c9d1bc0aac41d1c85
msgid "A document is a page of content, usually a self-contained piece of text. Documents can be written in several different formats, plain text, HTML or (re)Structured Text. The default home page for a Plone site is one example of a document."
msgstr ""

#: ../appendices/glossary.rst:69
# bf94f97b4ac34a7aa89831f45d3f1d90
msgid "DTML"
msgstr ""

#: ../appendices/glossary.rst:71
# b4dd66fd439b4eec800e4fd688bc74b3
msgid "Document Template Markup Language. DTML is a server-side templating language used to produce dynamic pieces of content, but is now superseded by :term:`ZPT` for HTML and XML content. It is still used sparingly for non-XML content like SQL and mail/CSS."
msgstr ""

#: ../appendices/glossary.rst:89
# 3b0b80d145d84d77b0223901057be45e
msgid "Dublin Core"
msgstr ""

#: ../appendices/glossary.rst:91
# 1d0838f656114706a3b4cd7a240711e6
msgid "Dublin Core is a standard set of metadata which enables the description of resources for the purposes of discovery. See https://en.wikipedia.org/wiki/Dublin_Core"
msgstr ""

#: ../appendices/glossary.rst:454
# 16edc0374b6e438d958ba5c8daecb868
msgid "easy_install"
msgstr ""

#: ../appendices/glossary.rst:456
# c1b3a8c9b74f4c1c85729b6a25ee2745
msgid "A command-line tool for automatic discovery and installation of packages into a Python environment. The ``easy_install`` script is part of the ``setuptools`` package, which uses the :term:`Python Package Index` as its source for packages."
msgstr ""

#: ../appendices/glossary.rst:12
# 3b5a607dc36f431da4a9c9b106a64bd5
msgid "Egg"
msgstr ""

#: ../appendices/glossary.rst:14
# a1f061d45fd04b35bb487d26c0ef7c8d
msgid "See :term:`Python egg`."
msgstr ""

#: ../appendices/glossary.rst:81
# ad29885bab374b908a7182c687afd000
msgid "Expiration Date"
msgstr ""

#: ../appendices/glossary.rst:83
# a77b8d3c256b4c1e9df0dd701cb7305a
msgid "The last day an item should show up in searches, news listings etc. Please note that this doesn't actually remove or disable the item, it merely makes it not show up in searches."
msgstr ""

#: ../appendices/glossary.rst:87
# e7e6b1f00ef44b8e9e658fda88c5bbd4
msgid "This is part of the Dublin Core metadata that is present on all Plone objects."
msgstr ""

#: ../appendices/glossary.rst:513
# ae1fb67b49b74f2e891d7c7cbf095986
msgid "GenericSetup"
msgstr ""

#: ../appendices/glossary.rst:515
# 4a67ffc22e89443cbe2ea77eec290621
msgid "An XML-based configuration system for Zope and Plone applications."
msgstr ""

#: ../appendices/glossary.rst:0
#: ../appendices/glossary.rst:0
# db28bf0258424d0aa2960500b7c6e967
# df6c9ac146f74b25bd2555dd8a7f964e
msgid "Todo"
msgstr ""

#: ../appendices/glossary.rst:517
#: ../appendices/glossary.rst:525
# f0c0e64574c74ec29dd94194431a4220
# 5636a60922884171bfdc421278fe6362
msgid "Add reference."
msgstr ""

#: ../appendices/glossary.rst:498
# e04775a5c1894b05ba1c6e4d80717a5f
msgid "gettext"
msgstr ""

#: ../appendices/glossary.rst:500
# 6c669632c3a24593b91cda36b70b07e8
msgid "UNIX standard software translation tool. See http://www.gnu.org/software/gettext/"
msgstr ""

#: ../appendices/glossary.rst:491
# 75d575efcbcf4acea111edb340a33878
msgid "grok"
msgstr ""

#: ../appendices/glossary.rst:493
# 4f6115e4d35d41c098bc70354cd03135
msgid "See the grok project documentation."
msgstr ""

#: ../appendices/glossary.rst:130
# e19af72ba31d4eeead53b3889c6f6637
msgid "i18n"
msgstr ""

#: ../appendices/glossary.rst:132
# c5cfa7d81039454195543a0b5beeb845
msgid "i18n is shorthand for \"internationalization\" (the letter I, 18 letters, the letter N) - and refers to the process of preparing a program so that it can be used in multiple languages without further altering the source. Plone is fully internationalized."
msgstr ""

#: ../appendices/glossary.rst:502
# 696fb1d159634c85b38a91b30d822d0e
msgid "i18ndude"
msgstr ""

#: ../appendices/glossary.rst:504
# e82c91fc9a1b46918958fc78998d3f04
msgid "Support tool to create and update message catalogs from instrumented source code."
msgstr ""

#: ../appendices/glossary.rst:526
# f7d5d31af9584b6b857c8a4c142cdf16
msgid "JSON"
msgstr ""

#: ../appendices/glossary.rst:528
# dfdb6f80b50445d8b129515e843923cc
msgid "JavaScript Object Notation. JSON is a lightweight text-based open standard designed for human-readable data interchange. In short, it's a string that looks like a JavaScript array, but is constrained to 6 simple data types. It can be parsed by many languages."
msgstr ""

#: ../appendices/glossary.rst:249
# c284d3b146c7499eba8559c2339fd287
msgid "KSS"
msgstr ""

#: ../appendices/glossary.rst:251
# 436fa41bd9c04f0dadc46124201b94a1
msgid "*Kinetic Style Sheets* is a client-side framework for implementing rich user interfaces with AJAX functionality. It allows attaching actions to elements using a CSS-like rule syntax. KSS was added to Plone in Plone 3 and removed in Plone 4.3, because JQuery made it obsolete."
msgstr ""

#: ../appendices/glossary.rst:205
# 03cbf8a5e9b34184978b2db0945be0dc
msgid "Kupu"
msgstr ""

#: ../appendices/glossary.rst:207
# 5a333a919ea14d7e80a6fe4f22797724
msgid "Kupu is the user-friendly graphical HTML editor component that used to be bundled with Plone, starting with version 2.1. It has since been replaced by :term:`TinyMCE`."
msgstr ""

#: ../appendices/glossary.rst:136
# c9fc7b3199424a05a43bf3a740ef7c3e
msgid "l10n"
msgstr ""

#: ../appendices/glossary.rst:138
# 887d5131f91743218aea07c96c38dc30
msgid "Localization is the actual preparing of data for a particular language. For example Plone is i18n aware and has localization for several languages. The term l10n is formed by the first and last letter of the word and the number of letters in between."
msgstr ""

#: ../appendices/glossary.rst:94
# 9ec19dab741746dcb5dc882921d827b1
msgid "Layer"
msgstr ""

#: ../appendices/glossary.rst:96
# 886d5998a54246778418f515b61c9f7a
msgid "A layer is a set of templates and scripts that get presented to the user. By combining these layers, you create what is referred to as a :term:`skin`. The order of layers is important, the topmost layers will be examined first when rendering a page. Each layer is an entry in ``portal_skins`` -> 'Contents', and is usually a Filesystem Directory View or a Folder."
msgstr ""

#: ../appendices/glossary.rst:156
# 79ce08fc1cfd4abbb90205f73d8c65b5
msgid "LDAP"
msgstr ""

#: ../appendices/glossary.rst:158
# ad399a0574ee4f62a2b3b8b5fa97c437
msgid "Lightweight Directory Access Protocol. An internet protocol which provides a specification for user-directory access by wire, attribute syntax, representation of distinguished names, search filters, an URL format, a schema for user-centric information, authentication methods, and transport layer security. Example: an email client might connect to an LDAP server in order to look up an email address for a person by a person's name."
msgstr ""

#: ../appendices/glossary.rst:165
# c79f908ee16f497fb5a13c731345095e
msgid "Manager"
msgstr ""

#: ../appendices/glossary.rst:167
# bde176731f974dfb84683cac8e5b307c
msgid "The *Manager* Security role is a standard role in Zope. A user with the Manager role has ALL permissions except the Take Ownership permission. Also commonly known as Administrator or root in other systems."
msgstr ""

#: ../appendices/glossary.rst:369
# d30929635e8446fda3bef262d1d8cc0c
msgid "METAL"
msgstr ""

#: ../appendices/glossary.rst:371
# 26385ba8c3714a2abf231f259617cf10
msgid "Macro Expansion Template Attribute Language. See :term:`ZPT`."
msgstr ""

#: ../appendices/glossary.rst:340
# a1407433eea242c1a9297a3606dfa1f6
msgid "Monkey patch"
msgstr ""

#: ../appendices/glossary.rst:342
# ab411d25c6544380b9121bb8220ff07c
msgid "A monkey patch is a way to modify the behaviour of Zope or a Product without altering the original code. Useful for fixes that have to live alongside the original code for a while, like security hotfixes, behavioural changes, etc."
msgstr ""

#: ../appendices/glossary.rst:347
# 324c7d74284845259d40c0c21c05c425
msgid "The term \"monkey patch\" seems to have originated as follows: First it was \"guerrilla patch\", referring to code that sneakily changes other code at runtime without any rules. In Zope 2, sometimes these patches conflict. This term went around Zope Corporation for a while. People heard it as \"gorilla patch\", though, since the two words sound very much alike, and the word gorilla is heard more often. So, when someone created a guerrilla patch very carefully and tried to avoid any battles, they tried to make it sound less forceful by calling it a monkey patch. The term stuck."
msgstr ""

#: ../appendices/glossary.rst:460
# 50181449b8064c2bbdbde9d11d748eb1
msgid "Namespace package"
msgstr ""

#: ../appendices/glossary.rst:462
# 8acf4616b8e847ad857234fda40aa5ac
msgid "A feature of setuptools which makes it possible to distribute multiple, separate packages sharing a single top-level namespace. For example, the packages ``plone.theme`` and ``plone.portlets`` both share the top-level ``plone`` namespace, but they are distributed as separate eggs. When installed, each egg's source code has its own directory (or possibly a compressed archive of that directory).  Namespace packages eliminate the need to distribute one giant plone package, with a top-level plone directory containing all possible children."
msgstr ""

#: ../appendices/glossary.rst:243
# e3dda522d4e54b8785f0fe9dbf6c981c
msgid "OpenID"
msgstr ""

#: ../appendices/glossary.rst:245
# a377270acc99411d9bac12bbf1eb6ff0
msgid "A distributed identity system. Using a single URI provider an individual is able to login to any web site that accepts OpenID using the URI and a password. Plone implements OpenID as a :term:`PAS` plug-in."
msgstr ""

#: ../appendices/glossary.rst:185
# 66e36b5ad15345929f7f9a63f641b89a
msgid "PAS"
msgstr ""

#: ../appendices/glossary.rst:187
# 8ae064e97f3c4b5a895027ada5e3cdd3
msgid "The Pluggable Authentication Service (PAS) is a framework for handling authentication in Zope 2. PAS is a Zope ``acl_users`` folder object that uses \"plugins\" that can implement various authentication interfaces (for example :term:`LDAP` and :term:`OpenID`) that plug into the PAS framework .  Zope 3 also uses a design inspired by PAS. PAS was integrated into Plone at the 2005 San Jose Sprint."
msgstr ""

#: ../appendices/glossary.rst:273
# 68bfac6e8cd146b38a99da628c1d75b8
msgid "PLIP"
msgstr ""

#: ../appendices/glossary.rst:275
# 6becaa38b8a645e582b07012128b6c97
msgid "*PLone Improvement Proposal* (just like Python's PEPs: Python Enhancement Proposals). These are documents written to structure and organise proposals for the improvement of Plone."
msgstr ""

#: ../appendices/glossary.rst:279
# 20d1e2ac507c4d00a0e05ad0a45dd9b9
msgid "Motivation, deliverables, risks and a list of people willing to do the work must be included. This document is submitted to the `Framework Team <http://plone.org/team/FrameworkTeam>`_, who reviews the proposal and decides if it's suitable to be included in the next Plone release or not."
msgstr ""

#: ../appendices/glossary.rst:285
# 56e33b3cde304fe3b6bdd03c1dcaf640
msgid "See more info about how to write a `PLIP <https://dev.plone.org/plone/wiki/PLIP>`_."
msgstr ""

#: ../appendices/glossary.rst:541
# ab1c7dd99fa54081a610161699a15dc0
msgid "Plonista"
msgstr ""

#: ../appendices/glossary.rst:543
# 24143c2267544219b245ec2c103a6b7e
msgid "A Plonista is a member of the Plone community. It can be somebody who loves Plone, or uses Plone, or someone who spreads Plone and Plone knowledge. It can also be someone who is a Plone developer, or it can be all of the above."
msgstr ""

#: ../appendices/glossary.rst:221
# ab9093f409c24ebeb964e2260f977edb
msgid "Product"
msgstr ""

#: ../appendices/glossary.rst:223
# cdbd079e89ae4adeb5a5b194c247b321
msgid "A Plone-specific module that extends Plone functionality and can be managed via the Plone Control Panel. Plone Products often integrate non-Plone-specific modules for use within the Plone context."
msgstr ""

#: ../appendices/glossary.rst:430
# 03c0b49b723f48e39cae9011d8e00060
msgid "Python egg"
msgstr ""

#: ../appendices/glossary.rst:432
# 69db56e96b5648569a2e02f385b68af2
msgid "A widely used Python packaging format which consists of a zip or ``.tar.gz`` archive with some metadata information. It was introduced by `setuptools <https://pypi.python.org/pypi/setuptools>`_"
msgstr ""

#: ../appendices/glossary.rst:437
# 61405cfd7aa74879ba0ab4bcbc632380
msgid "A way to package and distribute Python packages. Each egg contains a ``setup.py`` file with metadata (such as the author's name and email address and licensing information), as well as information about dependencies. ``setuptools``, the Python library that powers the egg mechanism, is able to automatically find and download dependencies for eggs that you install. It is even possible for two different eggs to concurrently use different versions of the same dependency. Eggs also support a feature called *entry points*, a kind of generic plug-in mechanism."
msgstr ""

#: ../appendices/glossary.rst:417
# 54b1115ea4db4c8e8fc962c987802c67
msgid "Python package"
msgstr ""

#: ../appendices/glossary.rst:419
# a160c5099d174d63bc7faa8b0739c6e0
msgid "A general term describing a redistributable Python module. At the most basic level, a package is a directory with an ``__init__.py`` file, which can be blank."
msgstr ""

#: ../appendices/glossary.rst:446
# 45caed60d4ca46ae9c78905f96f76ad7
msgid "Python Package Index"
msgstr ""

#: ../appendices/glossary.rst:448
# 708a7da381204bcbb245840bff3791e7
msgid "The Python community's index of thousands of downloadable Python packages. It is available as a website to browse, with the ability to search for a particular package. More importantly, setuptools-based packaging tools (most notably, ``buildout`` and ``easy_install``) can query this index to download and install eggs automatically. Also known as the Cheese Shop or PyPI."
msgstr ""

#: ../appendices/glossary.rst:406
# e4844a81a75742b9b6dd16ad08053613
msgid "Python path"
msgstr ""

#: ../appendices/glossary.rst:408
# e6a77381acc44cd99e8821388ef85149
msgid "The order and location of folders in which the Python interpreter will look for modules. It's available in python via ``sys.path``. When Zope is running, this typically includes the global Python modules making up the standard library, the interpreter's site-packages directory, where third party \"global\" modules and eggs are installed, the Zope software home, and the ``lib/python`` directory inside the instance home. It is possible for python scripts to include additional paths in the Python path during runtime. This ability is used by ``zc.buildout``."
msgstr ""

#: ../appendices/glossary.rst:316
# 4b37ede54f5f406f8f12e798a3235492
msgid "RAD"
msgstr ""

#: ../appendices/glossary.rst:318
# 35adb25ed9dd4bb1b1963600d14c3090
msgid "Rapid Application Development - A term applied to development tools to refer to any number of features that make programming easier. :term:`Archetypes` and :term:`ArchGenXML` are examples of these from the Plone universe."
msgstr ""

#: ../appendices/glossary.rst:142
# 9b040acf046343c98a7aeb7f844473ea
msgid "Request"
msgstr ""

#: ../appendices/glossary.rst:144
# 4b82bc71133b425a99e6dc574e2a30bb
msgid "Each page view by a client generates a request to Plone. This incoming request is encapsulated in a *request* object in Zope, usually called REQUEST (or lowercase \"request\" in the case of ZPT)."
msgstr ""

#: ../appendices/glossary.rst:291
# 6ce05cb3bf4444898d9d5d39f9924b20
msgid "ResourceRegistries"
msgstr ""

#: ../appendices/glossary.rst:293
# 1f52efab529e42fdb866852dde4fb9a2
msgid "A piece of Plone infrastructure that allows CSS/Javascript declarations to be contained in separate, logical files before ultimately being appended to the existing Plone CSS/Javascript files on page delivery. Primarily enables Product authors to \"register\" new CSS/Javascript without needing to touch Plone's templates, but also allows for selective inclusion of CSS/Javascript files and reduces page load by minimizing individual calls to separate blocks of CSS/Javascript files. Found in the :term:`ZMI` under ``portal_css`` and ``portal_javascript``."
msgstr ""

#: ../appendices/glossary.rst:15
# 54383ded6c59471fabb9e0eedb44c39f
msgid "reStructuredText"
msgstr ""

#: ../appendices/glossary.rst:17
# 23f2b1d5408140dd86a4897798921fd7
msgid "The standard plaintext markup language used for Python documentation: http://docutils.sourceforge.net/rst.html"
msgstr ""

#: ../appendices/glossary.rst:20
# 3d9b5b5902864aa4868ee48ec577eaf3
msgid "`reStructuredText <http://docutils.sourceforge.net/rst.html>`_ is an easy-to-read plaintext markup syntax and parser system. It is useful for in-line program documentation (such as Python docstrings), for quickly creating simple web pages, and for standalone documents. reStructuredText is designed to be extensible for specific application domains. The reStructuredText parser is a component of `Docutils <http://docutils.sourceforge.net/index.html>`_."
msgstr ""

#: ../appendices/glossary.rst:28
# bae7db36a0d64e009cb28c091aa56cfb
msgid "reStructuredText is a revision and reinterpretation of the `StructuredText <http://plone.org/documentation/glossary/stx>`_ and `Setext <http://docutils.sourceforge.net/mirror/setext.html>`_ lightweight markup systems."
msgstr ""

#: ../appendices/glossary.rst:102
# 0673e4b1736a4f9ab8e51764ef137c8a
msgid "Skin"
msgstr ""

#: ../appendices/glossary.rst:104
# 539eff0ef6264deea4d34290e0377de2
msgid "A collection of template layers (see :term:`layer`) is used as the search path when a page is rendered and the different parts look up template fragments.  Skins are defined in the :term:`ZMI` in ``portal_skins`` tool. Used for both presentation and code customizations."
msgstr ""

#: ../appendices/glossary.rst:32
# 69321937ec064206a51b1f18285c2fdb
msgid "slug"
msgstr ""

#: ../appendices/glossary.rst:34
# 8a716577bc5b4761ba43a6b989e11cce
msgid "A :term:`ZCML` *slug* is a one-line file created in a Zope instance's ``etc/package-includes`` directory, with a name like ``my.package-configure.zcml``. The contents of the file would be something like: ``<include package=\"my.package\" file=\"configure.zcml\" />``"
msgstr ""

#: ../appendices/glossary.rst:40
# 135cc916bae94880bc49f42f3f55c4c8
msgid "This is the Zope 3 way to load a particular package."
msgstr ""

#: ../appendices/glossary.rst:376
# a11deed2b28c4031a024e5120d43759e
msgid "Software home"
msgstr ""

#: ../appendices/glossary.rst:378
# 6890899c008a42d286354ca1b2b0287e
msgid "The directory inside the Zope installation (on the filesystem) that contains all the Python code that makes up the core of the Zope application server. The various Zope packages are distributed here. Also referred to as the ``SOFTWARE_HOME`` environment variable. It varies from one system to the next, depending where you or your packaging system installed Zope. You can find the value of this in the *ZMI > Control Panel*."
msgstr ""

#: ../appendices/glossary.rst:310
# 7ed8966531714f63a5d1df4f8ef5bbee
msgid "Sprint"
msgstr ""

#: ../appendices/glossary.rst:312
# c0eaeddeca884a109998f1ecf30d22a1
msgid "Based on ideas from the extreme programming (XP) community. A sprint is a three to five day focused development session, in which developers pair in a room and focus on building a particular subsystem. See http://plone.org/events/sprints"
msgstr ""

#: ../appendices/glossary.rst:57
# 613e16ed7ea34714b033ef90aa3c4cea
msgid "STX"
msgstr ""

#: ../appendices/glossary.rst:59
# b358c32a91ac4982b1c16ffaadd76c04
msgid "Structured Text is a simple markup technique that is useful when you don't want to resort to HTML for creating web content. It uses indenting for structure, and other markup for formatting. It has been superseded by :term:`reStructuredText`, but some people still prefer the old version, as it's simpler."
msgstr ""

#: ../appendices/glossary.rst:171
# bdaebb2a6ed94213998d594c46892bc2
msgid "Syndication"
msgstr ""

#: ../appendices/glossary.rst:173
# 82e30194b34f488da8da3db8fa2d3db9
msgid "Syndication shows you the several most recently updated objects in a folder in RSS format. This format is designed to be read by other programs."
msgstr ""

#: ../appendices/glossary.rst:366
# 4f92d58c3c7f4ce580bcc510fb11b89a
msgid "TAL"
msgstr ""

#: ../appendices/glossary.rst:368
# bdfd28fa77f64681964e876891c57e7f
msgid "Template Attribute Language. See :term:`ZPT`."
msgstr ""

#: ../appendices/glossary.rst:372
# e476b33b0bae4328b886e4e157987f8a
msgid "TALES"
msgstr ""

#: ../appendices/glossary.rst:374
# 306d1ec2b828464fb49ddbc33dd9f075
msgid ":term:`TAL` Expression Syntax. The syntax of the expressions used in TAL attributes."
msgstr ""

#: ../appendices/glossary.rst:210
# 16f8a52bfb9144b8a723408e66066b1d
msgid "TinyMCE"
msgstr ""

#: ../appendices/glossary.rst:212
# 89cc18fe56b44d848102d419ddcda5e7
msgid "A graphical HTML editor bundled with Plone."
msgstr ""

#: ../appendices/glossary.rst:336
# ade55cdbfb4a4114834160cfce3bdabe
msgid "TODO"
msgstr ""

#: ../appendices/glossary.rst:338
# 504df3492b0f4f199884ab5733a65b7c
msgid "The TODO marker in source code records new features, non-critical optimization notes, design changes, etc."
msgstr ""

#: ../appendices/glossary.rst:255
# 6c4a67d2209548519b35a19c184f169f
msgid "Traceback"
msgstr ""

#: ../appendices/glossary.rst:257
# 17cbd467c83a4174a8dbb4b67183ea5b
msgid "A Python \"traceback\" is a detailed error message generated when an error occurs in executing Python code. Since Plone, running atop Zope, is a Python application, most Plone errors will generate a Python traceback. If you are filing an issue report regarding a Plone or Plone-product error, you should try to include a traceback log entry with the report."
msgstr ""

#: ../appendices/glossary.rst:264
# f8d5d62f27ca4432b3eb51e693c491cf
msgid "To find the traceback, check your ``event.log`` log file. Alternatively, use the ZMI to check the ``error_log`` object in your Plone folder. Note that your Zope must be running in *debug* mode in order to log tracebacks."
msgstr ""

#: ../appendices/glossary.rst:269
# 4fcdd8b6b0204c3daae49517733d6d03
msgid "A traceback will be included with nearly all error entries. A traceback will look something like this: \"Traceback (innermost last): ...  AttributeError: adapters\" They can be very long. The most useful information is generally at the end."
msgstr ""

#: ../appendices/glossary.rst:506
# 4cb328d2c131493f850a5cb572b9ac09
msgid "traversal"
msgstr ""

#: ../appendices/glossary.rst:508
# 6a0a6efee1ef4323ba71c74f3e33f1f6
msgid "Publishing an object from the ZODB by traversing its parent objects, resolving security and names in scope. See the `Acquisition chapter in the Zope 2 book <http://docs.zope.org/zope2/zope2book/ZEO.html>`_. http://docs.zope.org/zope2/zope2book/Acquisition.html"
msgstr ""

#: ../appendices/glossary.rst:180
# 2de97a48892145d998341d5a192631c8
msgid "TTP"
msgstr ""

#: ../appendices/glossary.rst:182
# ab5872eda18646cd82e557caee646466
msgid "Actions done TTP are performed \"Through the Plone\" interface. It is normally a lazy way of telling you that you should not add things from the ZMI, as is the case for adding content, for example."
msgstr ""

#: ../appendices/glossary.rst:176
# 157c98d2a94346f7a13da9da2ace15d8
msgid "TTW"
msgstr ""

#: ../appendices/glossary.rst:178
# 51bcb8309a884e4da639b2b03dfe5417
msgid "This is a general term meaning an action can be performed \"Through The Web,\" as opposed to, say, being done programmatically."
msgstr ""

#: ../appendices/glossary.rst:213
# 40449d268bc24d90a995b14399688df9
msgid "UML"
msgstr ""

#: ../appendices/glossary.rst:215
# ca391d832a5246aeb5b5c4955856a562
msgid "The *Unified Modeling Language* is a general-purpose modeling language that includes a standardized graphical notation used to create an abstract model of a system, referred to as a *UML model*. With the use of :term:`ArchGenXML`, this can be used to generate code for CMF/Plone applications (a :term:`Product`) based on the Archetypes framework."
msgstr ""

#: ../appendices/glossary.rst:518
# d408ed12953b4e3e9781bf97e9d18fa3
msgid "virtualenv"
msgstr ""

#: ../appendices/glossary.rst:520
# fce297f4dc794af4be3af6ed5b56f04c
msgid "``virtualenv`` is a tool for creating a project directory with a Python interpreter that is isolated from the rest of the system. Modules that you install in such an environment remain local to it, and do not impact your system Python or other projects."
msgstr ""

#: ../appendices/glossary.rst:41
# 7b2eb168da7e412bbecca3bce0249742
msgid "VirtualHostMonster"
msgstr ""

#: ../appendices/glossary.rst:43
# 5d2788851f6b4da19107aab805fcd4cc
msgid "A Zope technology that supports virtual hosting. See `VirtualHostMonster URL rewriting mechanism <http://docs.zope.org/zope2/zope2book/VirtualHosting.html>`_"
msgstr ""

#: ../appendices/glossary.rst:46
# 9883e1677c65403da77907613d27456d
msgid "Workflow"
msgstr ""

#: ../appendices/glossary.rst:48
# 746bcb92eeb646b1a971a98e8333bded
msgid "Workflow is a very powerful way of mimicking business processes - it is also the way security settings are handled in Plone."
msgstr ""

#: ../appendices/glossary.rst:322
# a8079cb4f85c441ba476d0f7d8289f2e
msgid "XXX"
msgstr ""

#: ../appendices/glossary.rst:324
# 3df5c22cd70a4ed8af48a6c608dd7365
msgid "XXX is a marker in the comments of the source code that should only be used during development to note things that need to be taken care of before a final (trunk) commit. Ideally, one should not expect to see XXXs in released software. XXX shall not be used to record new features, non-critical optimization, design changes, etc. If you want to record things like that, use TODO comments instead. People making a release shouldn't care about TODOs, but they ought to be annoyed to find XXXs."
msgstr ""

#: ../appendices/glossary.rst:532
# 7e2929f7f0864f98b07080b6d8a55df8
msgid "ZCA"
msgstr ""

#: ../appendices/glossary.rst:534
# d3ebf41a4fad4381bf991a2ad411ebdd
msgid "The Zope Component Architecture (ZCA) is a Python framework for supporting component-based design and programming. It is very well suited to developing large Python software systems. The ZCA is not specific to the Zope web application server: it can be used for developing any Python application. From `A Comprehensive Guide to Zope Component Architecture <http://www.muthukadan.net/docs/zca.html>`_."
msgstr ""

#: ../appendices/glossary.rst:471
# de78b1ac16ff4b0db70d1c090b3f8dd0
msgid "ZCML"
msgstr ""

#: ../appendices/glossary.rst:473
# 99f10cc1cea643a8a89bc50eda8f28d1
msgid "Zope Configuration Markup Language. Zope 3 separates policy from the actual code and moves it out to separate configuration files, typically a ``configure.zcml`` file in a buildout. This file configures the Zope instance. 'Configuration' might be a bit misleading here and should be thought or more as wiring. ZCML, the XML-based configuration language that is used for this, is tailored to do component registration and security declarations, for the most part. By enabling or disabling certain components in ZCML, you can configure certain policies of the overall application. In Zope 2, enabling and disabling components means to drop in or remove a certain Zope 2 product. When it's there, it's automagically imported and loaded. This is not the case in Zope 3. If you don't enable it explicitly, it will not be found."
msgstr ""

#: ../appendices/glossary.rst:487
# fd60e77b881844ca9d3e8c946c6ba875
msgid "The :term:`grok` project has taken a different approach to the same problem, and allows component registration etc. to be done declaratively from Python code. Both approaches are possible in Plone."
msgstr ""

#: ../appendices/glossary.rst:398
# 2d7c4b1f0a834263bc6ac34fe78349ea
msgid "ZEO server"
msgstr ""

#: ../appendices/glossary.rst:400
# e58fd9eaa43541c3ac0663fefe83d901
msgid "ZEO (Zope Enterprise Objects) is a scaling solution used with Zope. The ZEO server is a storage server that allows multiple Zope instances, called ZEO clients, to connect to a single database.  ZEO clients may be distributed across multiple machines.  For additional info, see `the related chapter in The Zope Book <http://docs.zope.org/zope2/zope2book/ZEO.html>`_."
msgstr ""

#: ../appendices/glossary.rst:109
# c0626f2e4ffe46dbbf68977f82f6cacb
msgid "ZMI"
msgstr ""

#: ../appendices/glossary.rst:111
# cb6094530a234a53b572aa78debcf0c7
msgid "The *Zope Management Interface*. Zope has a built in Management Interface that is accessible through the web. Accessing is as simple as appending ``/manage`` to your URL, for example: ``http://localhost/manage`` - or visiting Plone Setup and clicking the *Zope Management Interface* link (Click 'View' to go back to the Plone site). Be careful in there, though - it's the \"geek view\" of things, and is not straightforward, nor does it protect you from doing stupid things. :)"
msgstr ""

#: ../appendices/glossary.rst:50
# 165931d2f606439ebf035d3f70cc5439
msgid "ZODB"
msgstr ""

#: ../appendices/glossary.rst:52
# 1f2593ad01f14854879dfcdd2f034492
msgid "The Zope Object Database is where your content is normally stored when you are using Plone. The default storage backend of the ZODB is *filestorage*, which stores the database on the file system in the file(s) such as ``Data.fs``, normally located in the ``var`` directory."
msgstr ""

#: ../appendices/glossary.rst:385
# 901b430d34614a1dbe86d05c77abf02f
msgid "Zope instance"
msgstr ""

#: ../appendices/glossary.rst:387
# af7c1fccb05b45e6b2be82ed0a409a67
msgid "An operating system process that handles HTTP interaction with a Zope database (:term:`ZODB`). In other words, the Zope web server process.  Alternatively, the Python code and other configuration files necessary for running this process."
msgstr ""

#: ../appendices/glossary.rst:392
# 98738776f55847e88f182df69d5421b3
msgid "One Zope installation can support multiple instances. Use the buildout recipe ``plone.recipe.zope2instance`` to create new Zope instances in a buildout environment."
msgstr ""

#: ../appendices/glossary.rst:396
# 79920ffbbddf4ac19338b9cd6d61da4b
msgid "Several Zope instances may serve data from a single ZODB using a ZEO server on the back-end."
msgstr ""

#: ../appendices/glossary.rst:422
# 5a120718c428472197f3490416f88423
msgid "Zope product"
msgstr ""

#: ../appendices/glossary.rst:424
# 2000203d75404052afdb80785279cda1
msgid "A special kind of Python package used to extend Zope. In old versions of Zope, all products were directories inside the special *Products* directory of a Zope instance; these would have a Python module name beginning with ``Products``. For example, the core of Plone is a product called *CMFPlone*, known in Python as ``Products.CMFPlone``."
msgstr ""

#: ../appendices/glossary.rst:119
# 130c6c799a9a45bf8278d06c7bdf3587
msgid "ZPL"
msgstr ""

#: ../appendices/glossary.rst:121
# d9934525853a4d1e935bf6819768a4ce
msgid "Zope Public License, a BSD-style license that Zope is licensed under."
msgstr ""

#: ../appendices/glossary.rst:123
# c4cef5e7cf264187a2c92d5e54913b0d
msgid "ZPT"
msgstr ""

#: ../appendices/glossary.rst:125
# a540227a10c14a1fa6607ea16ded7989
msgid "*Zope Page Templates* is the templating language that is used to render the Plone pages. It is implemented as two XML namespaces, making it possible to create templates that look like normal HTML/XML to editors. See http://docs.zope.org/zope2/zope2book/AppendixC.html"
msgstr ""

#: ../appendices/index.rst:2
# 4a273fb9486741c58e1553851c88c9b5
msgid "Appendices"
msgstr ""

#: ../appendices/older-manuals.rst:2
# 63d5ccb1c0924927a233f6578b8ec17e
msgid "older manuals"
msgstr ""

#: ../appendices/older-manuals.rst:4
# 63ca7c8d5bf34e228a286556879d5255
msgid "Some of these are still valid, and give a deeper understanding of the Plone/Zope ecosystem"
msgstr ""

